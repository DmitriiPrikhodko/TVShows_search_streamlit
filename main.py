import os
import streamlit as st
from dotenv import load_dotenv
from langchain.vectorstores import Qdrant
from langchain.chains import RetrievalQA
from langchain_groq import ChatGroq
from qdrant_client import QdrantClient
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_qdrant import QdrantVectorStore
from langchain.prompts import ChatPromptTemplate
from langchain.schema.runnable import RunnablePassthrough
from langchain.schema.output_parser import StrOutputParser
import requests
from PIL import Image
from io import BytesIO
import re
from langchain.embeddings import OpenAIEmbeddings

ROOT_DIR = os.path.dirname(__name__)
DEVICE = "cpu"
st.set_page_config(
    page_title="–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å–µ—Ä–∏–∞–ª–æ–≤",
    layout="wide",  # –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —à–∏—Ä–æ–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    initial_sidebar_state="expanded",  # –∏–ª–∏ "collapsed", –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
)


def format_docs(docs):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –ø—Ä–æ–º–ø—Ç"""
    formatted = []

    for i, doc in enumerate(docs, 1):
        metadata = doc.metadata

        show_info = f"""
        === –°–µ—Ä–∏–∞–ª {i} ===
        –ù–∞–∑–≤–∞–Ω–∏–µ: {metadata.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        –ù–æ–º–µ—Ä –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {metadata.get('position_in_rating', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        –ñ–∞–Ω—Ä—ã: {metadata.get('genres', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        –ì–æ–¥ —Å—Ç–∞—Ä—Ç–∞: {metadata.get('start_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        –ì–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {metadata.get('end_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        –°—Ç—Ä–∞–Ω–∞: {metadata.get('country', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–ø–∏–∑–æ–¥–∞: {metadata.get('episode_duration_minutes', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        –≠–ø–∏–∑–æ–¥—ã: {metadata.get('episodes', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        –°—Å—ã–ª–∫–∞: {metadata.get('url', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç–µ—Ä: {metadata.get('poster_url', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

        –û–ø–∏—Å–∞–Ω–∏–µ: {doc.page_content[:300]}...
        """

        formatted.append(show_info)

    return "\n".join(formatted)


# ==== 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ====
QDRANT_URL = st.secrets["QDRANT_URL"]
QDRANT_API = st.secrets["QDRANT_API"]
GROQ_API = st.secrets["GROQ_API"]

# load_dotenv()
# QDRANT_API = os.getenv("QDRANT_API")
# QDRANT_URL = os.getenv("QDRANT_URL")
# GROQ_API = os.getenv("GROQ_API")

# ==== 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant Cloud ====
client = QdrantClient(url=QDRANT_URL, api_key=QDRANT_API)

# ==== 3. –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é —á–µ—Ä–µ–∑ LangChain ====



model_name = "sentence-transformers/paraphrase-multilingual-mpnet-base-v2"
model_kwargs = {"device": DEVICE}
encode_kwargs = {"normalize_embeddings": True, "batch_size": 128}

embeddings_model = HuggingFaceEmbeddings(
    model_name=model_name,
    model_kwargs=model_kwargs,
    encode_kwargs=encode_kwargs,
)

vector_store = QdrantVectorStore(
    client=client, collection_name="Shows", embedding=embeddings_model
)

# ==== 4. –°–æ–∑–¥–∞–µ–º RetrievalQA —Ü–µ–ø–æ—á–∫—É ====

os.environ["GROQ_API_KEY"] = GROQ_API

llm = ChatGroq(model="openai/gpt-oss-120b", temperature=1.2, max_tokens=2000)

rag_prompt = ChatPromptTemplate.from_messages(
    [
        (
            "system",
            """–¢—ã –≤–µ—Å–µ–ª—ã–π –∏ –¥—É—à–µ–≤–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–µ—Ä–∏–∞–ª–∞–º.
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 5 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–∑ –Ω–∏—Ö —Å –∫—Ä–∞—Ç–∫–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–∏–≤–µ—Ç—Å–≤—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—Ç–¥–∞–≤–∞–π –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—à–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É —Å–µ—Ä–∏–∞–ª–∞, —Ä–µ–π—Ç–∏–Ω–≥ —Å–µ—Ä–∏–∞–ª–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–∏–π, –¥–ª–∏–Ω—É 1 —Å–µ—Ä–∏–∏.
    –ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö —É–∫–∞–∑–∞–Ω–∞ –¥–ª–∏–Ω–∞ —Å–µ—Ä–∏–∏ 0, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–π. –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –±–æ–ª—å—à–µ 2000 –Ω—É–∂–Ω–æ –∏—Ä–æ–Ω–∏—á–Ω–æ –Ω–∞–º–µ–∫–Ω—É—Ç—å, —á—Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–π —Å–µ—Ä–∏–∞–ª. –¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ä–Ω–∏—Ü—É —Å–µ—Ä–∏–∞–ª–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ–ª–µ "—Å—Å—ã–ª–∫–∞". –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–∞—Ö. –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å 1-2 —Å–µ—Ä–∏–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–∫–∞–∑–∞–ª–∏—Å—å –≤ –≤—ã–¥–∞—á–µ, –Ω–æ —Ç–∞–∫–∂–µ –º–æ–≥—É—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç—å –ø–æ–¥ —Å–µ—Ä–∏–∞–ª.    
    –ü–æ–º–Ω–∏: –ª—é–±–æ–π —é–º–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±—Ä—ã–º –∏ –Ω–µ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–º. –¶–µ–ª—å - —Å–¥–µ–ª–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º!

    –ï—Å–ª–∏ —Å—Ä–µ–¥–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤ –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø–æ–¥ –∑–∞–ø—Ä–æ—Å - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —ç—Ç–æ –æ—Ç–º–µ—Ç—å! üòÑ

    –°—Ç–∏–ª—å –∞–Ω–∞–ª–∏–∑–∞:
    - –ï—Å–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–µ—Ä–∏–∞–ª —à–∏—Ä–æ–∫–æ –∏–∑–≤–µ—Å—Ç–µ–Ω, –æ—Ç–º–µ—á–∞–π —ç—Ç–æ
    - –ï—Å–ª–∏ —Å–µ—Ä–∏–∞–ª –∏–ª–∏ –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ —Å–≤—è–∑–∞–Ω–∞ —Å –∫–∞–∫–∏–º–∏-–ª–∏–±–æ –º–µ–º–∞–º–∏, —à—É—Ç–∫–∞–º–∏, —Å–ª–æ–≤–∞–º–∏ –ø–µ—Å–µ–Ω –∏ —Ç.–¥. –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Å–Ω—è "–í–µ–¥—å–º–∞–∫—É –∑–∞–ø–ª–∞—Ç–∏—Ç–µ —á–µ–∫–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç–æ–π" –∏–∑ —Å–µ—Ä–∏–∞–ª–∞ –í–µ–¥—å–º–∞–∫)
    - –ü–æ–¥–º–µ—á–∞–π –∫–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å–µ—Ä–∏–∞–ª–æ–≤
    - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Å —ç–º–æ–¥–∑–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
    - –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∂–∏–≤—ã–º, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ç–æ–Ω–æ–º
    - –ï—Å–ª–∏ —Å–µ—Ä–∏–∞–ª —è–≤–ª—è–µ—Ç—Å—è –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–º –∏–ª–∏ –∞–Ω–∏–º–µ –Ω–∞–¥–æ —ç—Ç–æ —É–∫–∞–∑–∞—Ç—å
    - –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏ 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –ø–æ–¥–±–æ—Ä–∫–∏
    - –ü—Ä–æ–≤–µ—Ä—è–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã. –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Å–ª–æ–≤–∞
    –ú–Ω–µ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Ç—ã –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç –≤ c–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
    –ë–ª–æ–∫ –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∫–æ–º | –¢–µ–∫—Å—Ç –ø—Ä–æ –°–µ—Ä–∏–∞–ª 1 | –¢–µ–∫—Å—Ç –ø—Ä–æ –°–µ—Ä–∏–∞–ª 2 | –¢–µ–∫—Å—Ç –ø—Ä–æ –°–µ—Ä–∏–∞–ª 3 | –¢–µ–∫—Å—Ç –ø—Ä–æ –°–µ—Ä–∏–∞–ª 4 | –¢–µ–∫—Å—Ç –ø—Ä–æ –°–µ—Ä–∏–∞–ª 5 | –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π –±–ª–æ–∫

    –≠—Ç–æ –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã —è –ø–æ—Ç–æ–º —Å–º–æ–≥ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã split(' | ')
    
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ —Å–µ—Ä–∏–∞–ª–∞—Ö:
    - 1 —Å—Ç—Ä–æ–∫–∞: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞ –∂–∏—Ä–Ω—ã–º, –≥–æ–¥ –Ω–∞—á–∞–ª–∞ –≤ —Å–∫–æ–±–∫–∞—Ö –Ω–µ –∂–∏—Ä–Ω—ã–º
    - 2 —Å—Ç—Ä–æ–∫–∞: –∂–∞–Ω—Ä—ã
    - –° –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–µ—Ä–∏–∞–ª—É. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–∞–∂–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –∏ –∑–∞–≤—è–∑–∫—É —Å—é–∂–µ—Ç–∞ —Å–µ—Ä–∏–∞–ª–∞
    - –° –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ—Ä–∏–∞–ª, –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç, –Ω–µ –≤—ã–≤–æ–¥–∏
    - —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –ü–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
    - —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ x —Å–µ—Ä–∏–π –ø–æ y –º–∏–Ω—É—Ç
    """,
        ),
        (
            "human",
            """üìä –î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
{context}

üéØ –ó–ê–ü–†–û–° –ù–ê –≠–ö–°–ü–ï–†–¢–ò–ó–£: {question}""",
        ),
    ]
)

retriever = vector_store.as_retriever(search_type="similarity", search_kwargs={"k": 10})
from langchain.schema.runnable import RunnablePassthrough
from langchain.schema.output_parser import StrOutputParser

# –°–æ–∑–¥–∞–µ–º RAG —Ü–µ–ø–æ—á–∫—É
rag_chain = (
    {
        "context": retriever | format_docs,
        "question": RunnablePassthrough(),
    }  # —Å–ª–æ–≤–∞—Ä—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª—é—á–∏ - —ç—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –ø—Ä–æ–º–ø—Ç
    | rag_prompt  # –ø—Ä–æ–º–ø—Ç –¥–ª—è RAG
    | llm  # —Ç—É—Ç –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª—é–±—É—é llm-–º–æ–¥–µ–ª—å
    | StrOutputParser()  # –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
)

# ==== 5. Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ====
st.title("üé¨ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å–µ—Ä–∏–∞–ª–æ–≤")

query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:")


def get_images(query, names):
    search_answer = vector_store.similarity_search_with_score(query=query, k=10)
    name_poster = {}
    for i, doc in enumerate(search_answer, 1):
        metadata_2 = doc[0].metadata
        name_poster[f"{metadata_2.get('title', i)}"] = metadata_2.get(
            "poster_url", "Not found"
        )
    result = {}

    for name in names:
        response = requests.get(name_poster[name])
        image = Image.open(BytesIO(response.content))
        result[name] = image
    return result


if query:
    with st.spinner("–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é..."):
        try:
            answer = rag_chain.invoke(query)
        except Exception as e:
            answer = f"‚ùå –û—à–∏–±–∫–∞: {e}"
    st.markdown("**–†–µ–∑—É–ª—å—Ç–∞—Ç:**")
    # st.write(answer)
    split_text = answer.split("|")
    split_text = [c.strip() for c in split_text]
    names = []
    for i in range(1, min(6, len(split_text))):
        text = split_text[i]
        match = re.search(r"\*\*(.+?)\*\*", text)
        if match:
            title = match.group(1)
        names.append(title)
    images = get_images(query, names)
    text_0 = split_text[0]
    st.markdown(f"<p style='font-size:18px;'>{text_0}</p>", unsafe_allow_html=True)

    for i in range(1, min(6, len(split_text))):  # –≤—ã–≤–æ–¥–∏–º –º–∞–∫—Å–∏–º—É–º 5 –±–ª–æ–∫–æ–≤
        col1, col2 = st.columns([1, 3])  # 1/4 –∏ 3/4
        with col1:
            st.image(images[names[i - 1]], use_container_width=True)
        with col2:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
            text = split_text[i]
            st.write(text)
        st.markdown("---")  # —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

    # –í—ã–≤–æ–¥–∏–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if len(split_text) > 6:
        st.markdown(
            f"<p style='font-size:18px;'>{split_text[6]}</p>", unsafe_allow_html=True
        )
